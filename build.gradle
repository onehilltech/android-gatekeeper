buildscript {
    repositories {
        jcenter ()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
        classpath 'com.google.gms:google-services:1.3.0-beta1'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
    }
}

allprojects {
    repositories {
        jcenter ()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.neenbedankt.android-apt'

group = project.property ('build.group')
version = project.property ('build.version')

android {
    compileSdkVersion project.property ('android.compileSdkVersion').toInteger ()
    buildToolsVersion project.property ('android.buildToolsVersion')

    defaultConfig {
        minSdkVersion project.property ('android.minSdkVersion')
        targetSdkVersion project.property ('android.targetSdkVersion').toInteger ()

        versionCode = project.property ('build.versionCode').toInteger ()
        versionName = project.property ('build.version')

        testApplicationId project.property ('android.testApplicationId')
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

}

dependencies {
    apt 'com.raizlabs.android:DBFlow-Compiler:2.2.1'

    compile 'com.raizlabs.android:DBFlow-Core:2.2.1'
    compile 'com.raizlabs.android:DBFlow:2.2.1'
    compile 'com.mcxiaoke.volley:library:1.0.19'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.2'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.2'
    compile 'org.apache.commons:commons-lang3:3.0'
    compile 'com.google.android.gms:play-services-gcm:8.1.0'
    compile 'com.onehilltech.metadata:android-metadata:1.3.1'

    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile 'junit:junit:4.11'
    androidTestCompile('com.android.support.test:testing-support-lib:0.1') {
        exclude group: 'junit'
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'

                // Add your description here
                name project.property ('project.name')
                url  project.property ('project.website')

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'hilljh82'
                        name 'James H. Hill'
                        email 'james@onehilltech.com'
                    }
                }
                scm {
                    connection project.property ('project.vcs')
                    developerConnection project.property ('project.vcs')
                    url project.property ('project.website')
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    classpath += configurations.compile
    classpath += project.files (android.getBootClasspath().join(File.pathSeparator))

    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    //options.encoding = 'UTF-8'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = project.property ('bintray.user')
    key  = project.property ('bintray.apikey')

    configurations = ['archives']

    pkg {
        repo    = project.property ('bintray.repo')
        userOrg = project.property ('bintray.organization')
        name    = project.property ('project.name')
        desc    = project.property ('project.description')

        publish = true
        dryRun  = false

        websiteUrl      = project.property ('project.website')
        vcsUrl          = project.property ('project.vcs')
        issueTrackerUrl = project.property ('project.issues')

        licenses = ['Apache-2.0']
        labels   = ['android', 'metadata', 'AndroidManifest.xml']

        publicDownloadNumbers = true

        version {
            name   = project.property ('build.version')
            desc   = project.property ('project.description')
            vcsTag = project.property ('build.version')
        }
    }
}
